@page "/earnings"
@using Blazor.FinanceMentor.Client.Components
@using Blazor.FinanceMentor.Shared
@using System.Globalization
@inject HttpClient Http;
<div class="row">
    <div class="col-lg-8">
        <div class="card-header">
            Earnings
        </div>
        <div class="card-body">
            <table class="table teable-striped">
                <thead>
                <tr>
                    <th>Date</th>
                    <th>Category</th>
                    <th>Subject</th>
                    <th>Amount</th>
                    <th>&nbsp;</th>
                </tr>
                </thead>
                <tbody>
                @if (earnings == null)
                {
                    <tr><td><em>Loading...</em></td></tr>
                }
                else
                {
                    @foreach (var earning in earnings)
                    {
                        <tr>
                            <td>@earning.Date.ToShortDateString()</td>
                            <td>@earning.Category</td>
                            <td>@earning.Subject</td>
                            <td>@earning.Amount.ToString("C2", CultureInfo.CreateSpecificCulture("en-US"))</td>
                            <td><button type="button" class="btn btn-danger btn-sm" @onclick="() => OpenDeleteDialog(earning)">Delete</button></td>
                        </tr>
                    }
                }
                </tbody>
            </table>
        </div>
    </div>
    <div class="col-lg-4">
        <EarningForm OnSubmitCallback="@Refresh"></EarningForm>
    </div>
</div>
<div>&nbsp;</div>
@if (DeleteDialogOpen)
{
    // we call the ModalDialog, passing the Parameter of OnClose delegate. This points to the OnDeleteDialogClose private method
    <ModalDialog Title="Are you sure?" Text="Do you want to delete this entry?" OnClose="@OnDeleteDialogClose"></ModalDialog>
}
@code {
    private Earning[] earnings;
    private Earning _earningToDelete = null;

    public bool DeleteDialogOpen { get; set; } // This property determines if the ModalDialog will be shown

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        earnings = await Http.GetFromJsonAsync<Earning[]>("api/Earnings");
        StateHasChanged();
    }

    // This method is passed as a parameter to EarningForm (see above. OnSubmitCallback) that is Invoked on EarningForm.Submit of data 
    public async Task Refresh()
    {
        await LoadData();
    }

    private void OpenDeleteDialog(Earning earning)
    {
        _earningToDelete = earning;
        DeleteDialogOpen = true;
    }

    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            await Http.DeleteAsync($"api/Earnings/{_earningToDelete.Id}");
            await LoadData();
            _earningToDelete = null;
        }

        DeleteDialogOpen = false;
        StateHasChanged();
    }

    

}
